{"version":3,"sources":["components/Header.js","components/About.js","components/BankPickButton/BankPickButton.js","components/BankPickButton/index.js","data/actions.js","components/BankClearButton/BankClearButton.js","components/BankClearButton/index.js","components/Bank/Bank.js","components/Bank/index.js","components/AddPlayer/AddPlayer.js","components/AddPlayer/index.js","components/DrawPlayer/DrawPlayer.js","components/DrawPlayer/index.js","components/PicksList/PicksList.js","components/PicksCreateButton/PicksCreateButton.js","components/PicksCreateButton/index.js","components/PicksClearButton/PicksClearButton.js","components/PicksClearButton/index.js","components/Picks/Picks.js","components/Picks/index.js","components/NewPlayers/NewPlayers.js","components/NewPlayers/index.js","components/Team/Team.js","components/Team/Team1.js","components/Team/Team2.js","components/Reshuffle/Reshuffle.js","components/Reshuffle/index.js","components/Save/Save.js","components/Save/index.js","components/Teams/Teams.js","components/Teams/index.js","App.js","data/initial.js","data/reducer.js","data/store.js","index.js"],"names":["Header","className","About","href","target","rel","BankPickButton","props","state","player","handleClick","bind","event","preventDefault","this","selectPlayer","onClick","Component","connect","bank","dispatch","type","BankClearButton","clickClearBank","buttonText","Bank","length","map","index","isPicked","name","playCount","players","AddPlayer","isNew","handleChange","handleSubmit","e","currentTarget","value","setState","handleSave","onSubmit","onChange","data","DrawPlayer","clickDraw","PicksList","message","PicksCreateButton","createClick","PicksClearButton","clickClearPickedPlayers","Picks","NewPlayers","playersChosen","Team","teamName","team","generateClick","substring","team1Name","team1","Team1","team2Name","team2","Team2","Reshuffle","shuffleClick","Save","clickSave","Teams","App","initial","adjectives","everydayWords","nouns","randomiseTeams","shuffledPlayers","i","pick","splice","Math","floor","random","push","slice","generateName","adjective","everyday","noun","resetIsPicked","updateIsNew","reducer","action","window","confirm","clearBank","pickPlayer","some","filteredBank","filter","randomisedFilter","sort","a","b","drawPlayer","trimLeft","trimRight","alert","bankPlayer","toLowerCase","playersMember","addPlayer","startGame","forEach","clearPickedPlayers","generateName1","generateName2","incrementPlayCount","save","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bf7a0ef.chunk.js","sourcesContent":["const Header = () => (\n  <header className=\"header\">\n    <h1><i className=\"fas fa-futbol\"></i> Save Our Play</h1>  \n  </header>\n);\nexport default Header;","const About = () => (\n  <section>\n    <div className=\"overview-wrapper\">\n      <div className=\"about-box overview\">\n        <h3 className=\"about-subheading\">Pick teams fairly and plan a series of friendly games, where everyone gets their turn.</h3>\n        <h3 className=\"about-subheading\"><i className=\"fas fa-futbol\"></i></h3>\n        <p className=\"about-text\">Save Our Play is for groups who play a regular series of games, considering:</p>\n        <ul>\n          <li>Not everyone is available to play in each game.</li>  \n          <li>More people may want to play than the team size - particularly with current COVID restrictions on the numbers in which teams can safely meet and practice.</li>  \n        </ul>        \n      </div>\n    </div>\n    <div className=\"about-boxes\">\n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\"><i className=\"fas fa-volleyball-ball\"></i> Player bank</h3>\n        <p className=\"about-text\">To help adjudicate who’s due the next game when there are more people who want to play than spaces available, the player bank keeps track of the games assigned to each player on <span className=\"button-span\">Save</span>. You can <span className=\"button-span\">Pick</span> available players directly from the bank when you plan games.</p>\n      </div>      \n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\"><i className=\"fas fa-basketball-ball\"></i> Draw by play-count</h3>\n        <p className=\"about-text\">The <span className=\"button-span\">Draw</span> feature automatically picks players with the lowest play-counts. If multiple players have the lowest count, the selection is randomised within this set. Any team size is supported, respecting variation in restrictions.</p>\n        \n      </div>   \n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\"><i className=\"far fa-futbol\"></i> Randomise Teams</h3>\n        <p className=\"about-text\">Once happy with player selection, sort players into teams randomly with <span className=\"button-span\">Create teams</span>. Randomise arrangements again with<span className=\"button-span\">Reshuffle teams</span>.</p>\n      </div>\n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\"><i className=\"fas fa-futbol\"></i> Team name generator</h3>\n        <p className=\"about-text\">Don’t take play too seriously? The <span className=\"button-span\">Generate team name</span>feature will give you a (near) endless supply of tongue-in-cheek triple-barrel names for each side.</p>\n      </div>\n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\">Version 1 information:</h3>\n        <p className=\"about-text\">Player data is stored locally for each browser session. <a href=\"https://github.com/ammersive/save-our-play\" target=\"_blank\" rel=\"noreferrer\">Version 2</a> (in development) will support storage of player data between sessions, powered by <a href=\"https://github.com/ammersive/tp-back/\" target=\"_blank\" rel=\"noreferrer\">this API</a>.</p>\n      </div>\n    </div>\n  </section>\n);\nexport default About;","import { Component } from \"react\";\nclass BankPickButton extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      player: props.player,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    this.props.selectPlayer({ ...this.state });\n  }\n\n  render() {\n    return(\n      <button onClick={ this.handleClick }>Pick</button>\n    );\n  }\n}\n\nexport default BankPickButton;\n","import BankPickButton from \"./BankPickButton\";\nimport { connect } from \"react-redux\";\nimport { pickPlayer } from \"../../data/actions\";\n\nconst mapStateToProps = state => {\n  return {\n    bank: state.bank,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      selectPlayer: ( player ) => dispatch(pickPlayer(player)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BankPickButton);\n","// Action creators:\n// Functions which return an action when called (from a component wrapper)\n\nexport const clearBank = () => {  \n  return { \n    type: \"CLEAR_BANK\",\n  };\n};\n\nexport const addPlayer = ({ player }) => {\n  return {\n    type: \"ADD_PLAYER\",\n    player: player,\n  };\n};\n\nexport const pickPlayer = ({ player }) => {\n  return {\n    type: \"PICK_PLAYER\",\n    player: player,\n  };\n};\n\nexport const drawPlayer = () => {\n  return {\n    type: \"DRAW_PLAYER\"\n  };\n};\n\nexport const createTeams = () => {\n  return {\n    type: \"CREATE_TEAMS\",\n  };\n};\n\nexport const clearPickedPlayers = () => {\n  return {\n    type: \"CLEAR_CLICKED_PLAYERS\",\n  };\n};\n\nexport const generateName1 = () => {\n  return {\n    type: \"GENERATE_NAME1\",\n  };\n};\n\nexport const generateName2 = () => {\n  return {\n    type: \"GENERATE_NAME2\",\n  };\n};\n\nexport const shuffleTeams = () => {\n  return {\n    type: \"RANDOMISE_TEAMS\",\n  };\n};\n\nexport const save = () => {\n  return {\n    type: \"SAVE\",\n  };\n};","const BankClearButton = ({ clickClearBank, buttonText }) => (\n  <button className=\"bank-clear\" onClick={ clickClearBank }>\n    {buttonText}\n  </button>\n);\nexport default BankClearButton;","import { connect } from \"react-redux\";\nimport BankClearButton from \"../BankClearButton/BankClearButton\";\nimport { clearBank } from \"../../data/actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    bank: state.bank,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => { \n  return {\n    clickClearBank: () => dispatch(clearBank())       \n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BankClearButton);","import BankPickButton from \"../BankPickButton/\";\nimport BankClearButton from \"../BankClearButton/\";\n\nconst Bank = ({ bank }) => {\n  \n  return (    \n    <div className=\"bank\">\n      <h3>Player bank</h3> \n      {bank.length > 0 ? \n      <> \n        <h4>Number of previous plays</h4> \n        <ul>\n          { bank.map((player, index) => (\n            <li className={ player.isPicked === true ? \"picked\" : null }>\n              <div className=\"player-cell\">\n                { player.name }\n              </div>  \n              <div className=\"play-count-cell\">\n                { player.playCount }\n              </div> \n              <div className=\"bank-add-wrap\">\n                <BankPickButton index={ index } player={ player }/>\n              </div>\n            </li>   \n          )) }\n        </ul>\n        <BankClearButton buttonText={ \"Clear the bank\" }/>\n      </>\n      : <p className=\"no-players\">Bank is empty</p> }      \n    </div>    \n  );\n};\n\nexport default Bank;","import { connect } from \"react-redux\";\nimport Bank from \"./Bank\";\n\nconst mapStateToProps = state => {\n  return {\n    bank: state.bank,\n    players: state.players,\n  };\n};\n\nexport default connect(mapStateToProps)(Bank);","import { Component } from \"react\";\n\nclass AddPlayer extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tplayer: { name: \"\", playCount: 0, isPicked: false, isNew: true },\n\t\t};\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleChange(e) {\n\t\tlet player = { name: e.currentTarget.value, playCount: 0, isPicked: false, isNew: true }; \n\t\tthis.setState({ player: player });\n\t}\n\n\thandleSubmit(e) {\n\t\te.preventDefault();\n\t\tthis.props.handleSave({ ...this.state }); // copy the local state\tto pass up\t\t\t\n\t\tthis.setState({ player: { name: \"\", playCount: 0, isPicked: false, isNew: true } }); //reset the state\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"draw-add-players\">\n\t\t\t\t<h3>Add new</h3>\n\t\t\t\t<p>Add new player</p>\n\t\t\t\t<form onSubmit={ this.handleSubmit } >\n\t\t\t\t\t<input onChange={ this.handleChange } value={ this.state.player.name }/>\n\t\t\t\t\t<button className=\"add-button\">Add</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default AddPlayer;","import { connect } from \"react-redux\";\nimport AddPlayer from \"./AddPlayer\";\nimport { addPlayer } from \"../../data/actions\";\n\nconst mapStateToProps = state => {\n  return {\n    player: state.player\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSave: data => dispatch(addPlayer(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPlayer);","const DrawPlayer = ({ clickDraw }) => (\n  <div className=\"draw-add-players\">\n    <h3>Draw</h3>\n    <p>Draw players due a game</p>    \n    <button className=\"draw-button\" onClick={ clickDraw }>Draw</button>\n  </div>\n);\nexport default DrawPlayer;\n","import { connect } from \"react-redux\";\nimport DrawPlayer from \"./DrawPlayer\";\nimport { drawPlayer } from \"../../data/actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    bank: state.bank,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    clickDraw: () => dispatch(drawPlayer()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DrawPlayer);","const PicksList = ({ players }) => {\n  let message = \"\";\n\n  if ((players.length % 2 === 0) && (players.length > 0)) {\n    message = `${players.length} players added. Even teams, great!`;\n  }\n  else if (players.length === 1) {\n    message = `${players.length} player added. Teams will be uneven...`;\n  }\n  else if (players.length % 2 === 1) {\n    message = `${players.length} players added. Teams will be uneven...`;\n  }; \n\n  return ( \n    <>\n      <ul className=\"players-list\"> \n        { players.map((player, index) => (            \n          <li className=\"player-list-item\" key={ index }>{ player.name }</li> \n        )) } \n      </ul>\n      <p className=\"message\">{ message }</p>\n    </>\n  );\n};\n\nexport default PicksList;","import { Component } from \"react\";\n\nclass PicksCreateButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {    \n    this.props.createClick();\n  }\n\n  render() {\n    return(\n      this.props.players.length > 0 ?\n      <button className=\"create-button\" onClick={ this.handleClick }>Create Teams</button> :\n      <p className=\"no-players\">No players picked yet</p> \n    );\n  }\n}\n\nexport default PicksCreateButton;","import { connect } from \"react-redux\";\nimport PicksCreateButton from \"./PicksCreateButton\";\nimport { createTeams } from \"../../data/actions\";\n\nconst mapDispatchToProps = (dispatch) => { \n  return {    \n    createClick: () => dispatch(createTeams())    \n  };\n};\n\nexport default connect(null, mapDispatchToProps)(PicksCreateButton);\n\n","const PicksClearButton = ({ clickClearPickedPlayers, buttonText, players }) => (\n  players.length > 0 ?\n  <button className=\"clear-picked-players\" onClick={ clickClearPickedPlayers }>\n  {buttonText}\n  </button> :\n  null  \n);\nexport default PicksClearButton;","import { connect } from \"react-redux\";\nimport PicksClearButton from \"./PicksClearButton\";\nimport { clearPickedPlayers } from \"../../data/actions\";\n\nconst mapDispatchToProps = (dispatch) => { \n  return {\n    clickClearPickedPlayers: () => dispatch(clearPickedPlayers())       \n  };\n};\n\nexport default connect(null, mapDispatchToProps)(PicksClearButton);","import PicksList from \"../PicksList/PicksList\";\nimport PicksCreateButton from \"../PicksCreateButton\";\nimport PicksClearButton from \"../PicksClearButton\";\n\nconst Picks = ({ players }) => (\n  <div className=\"picks\">    \n    <h3>Picks</h3> \n    <PicksList players={ players }/> \n    <PicksCreateButton players={ players }/>\n    <PicksClearButton players={ players } buttonText={ \"Clear these players\" }/>\n  </div>\n);\n\nexport default Picks;  ","import { connect } from \"react-redux\";\nimport Picks from \"./Picks\";\n\nconst mapStateToProps = (state) => {\n  return {\n    players: state.players,\n  };\n};\n\nexport default connect(mapStateToProps)(Picks);","import Bank from \"../Bank\";\nimport AddPlayer from \"../AddPlayer\";\nimport DrawPlayer from \"../DrawPlayer\";\nimport Picks from \"../Picks/\";\n\nconst NewPlayers = ({ players, bank, playersChosen }) => (\n  \n  !playersChosen ?\n\n  <section className=\"section-wrapper players-wrapper\">\n    <header className=\"section-header\">\n      <h2><i className=\"fas fa-futbol\"></i> Select Players</h2>\n    </header>\n    <div className=\"players-content-wrapper\">    \n      <div className=\"bank-wrapper\"> \n        <Bank bank={ bank } />       \n      </div>\n      <div className=\"draw-add-wrapper\"> \n        <DrawPlayer bank={ bank } /> \n        <AddPlayer bank={ bank } players={ players }/>\n      </div> \n      <div className=\"picks-wrapper\">\n        <Picks />\n      </div>\n    </div>\n  </section>\n\n  : null\n);\n\nexport default NewPlayers;","import { connect } from \"react-redux\";\nimport NewPlayers from \"./NewPlayers\";\n\nconst mapStateToProps = (state) => {\n  return {\n    bank: state.bank,\n    players: state.players,\n    playersChosen: state.playersChosen,\n  };\n};\n\nexport default connect(mapStateToProps)(NewPlayers);","const Team = ({ teamName, team, generateClick }) => {\n  return (\n    <div className=\"team-wrapper\">\n      <h3 className=\"team-name\">{ teamName }</h3>\n      <button className=\"generate\" onClick={ generateClick }>\n        {teamName.substring(0 , 4) === \"Team\" ? \"Generate team name\" : \"New name\"}\n      </button>\n      <ul className=\"team-list\"> \n        { team.map((player, index) => (            \n          <li className=\"team-member\" key={ index }>{ player.name }</li> \n        )) } \n      </ul>\n    </div>\n  );\n};\n\nexport default Team;","import { connect } from \"react-redux\";\n\nimport Team1 from \"./Team\";\n\nimport { generateName1 } from \"../../data/actions\";\n\nconst mapStateToProps = (state) => { \n  return {\n    teamName: state.team1Name,\n    team: state.team1        \n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {    \n    generateClick: () => dispatch(generateName1())    \n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Team1);","import { connect } from \"react-redux\";\n\nimport Team2 from \"./Team\";\n\nimport { generateName2 } from \"../../data/actions\";\n\nconst mapStateToProps = (state) => { \n  return {\n    teamName: state.team2Name,\n    team: state.team2        \n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {    \n    generateClick: () => dispatch(generateName2())    \n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Team2);","import { Component } from \"react\";\n\nclass Reshuffle extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {    \n    this.props.shuffleClick();\n  }\n\n  render() {\n    return(\n      <button onClick={ this.handleClick }>Reshuffle teams</button>\n    );\n  }\n}\n\nexport default Reshuffle;","import { connect } from \"react-redux\";\nimport Reshuffle from \"./Reshuffle\";\nimport { shuffleTeams } from \"../../data/actions\";\n\nconst mapDispatchToProps = (dispatch) => {\n  return {    \n    shuffleClick: () => dispatch(shuffleTeams())    \n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Reshuffle);","const Save = ({ clickSave }) => (\n  <button onClick={ clickSave }>\n    Save\n  </button>\n);\nexport default Save;","import { connect } from \"react-redux\";\nimport Save from \"./Save\";\nimport { save } from \"../../data/actions\";\n\nconst mapDispatchToProps = (dispatch) => { \n  return {\n    clickSave: () => dispatch(save())       \n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Save);","// import GenerateName from \"../GenerateName\";\nimport Team1 from \"../Team/Team1\";\nimport Team2 from \"../Team/Team2\";\nimport Reshuffle from \"../Reshuffle/\";\nimport Save from \"../Save/\";\n\nconst Teams = ({ playersChosen }) => (\n  playersChosen ?\n  <section className=\"section-wrapper game-wrapper\">\n    <header className=\"section-header\">\n      <h2><i className=\"fas fa-futbol\"></i> Teams</h2>\n    </header>\n    <div className=\"shuffle\">\n      <Reshuffle />\n    </div>\n    <div className=\"teams\">\n      <div className=\"team\">\n        <Team1 />\n      </div>    \n      <div className=\"team\">\n        <Team2 />\n      </div>\n    </div>\n    <div className=\"save\">\n      <Save />\n    </div>      \n  </section> \n  : null\n);\n\nexport default Teams;","import { connect } from \"react-redux\";\nimport Teams from \"./Teams\";\n\nconst mapStateToProps = (state) => {\n  return {\n    players: state.players,\n    team1Name: state.team1Name,\n    team2Name: state.team2Name,\n    playersChosen: state.playersChosen,\n  };\n};\n\nexport default connect(mapStateToProps)(Teams);","import Header from \"./components/Header\";\nimport About from \"./components/About\";\nimport NewPlayers from \"./components/NewPlayers\";\nimport Teams from \"./components/Teams\";\n\nconst App = () => (\n  <>\n    <Header />\n    <About />\n    <NewPlayers />\n    <Teams />\n  </>\n);\n\nexport default App;\n","const initial = {\n  players: [], \n  team1: [],\n  team2: [],\n  team1Name: \"Team 1\",\n  team2Name: \"Team 2\",\n  bank: [\n    {name: \"Katrina\", playCount: 2, isPicked: false, isNew: false},\n    {name: \"Steve\", playCount: 1, isPicked: false, isNew: false},\n    {name: \"Pavati\", playCount: 5, isPicked: false, isNew: false},\n    {name: \"Bex\", playCount: 6, isPicked: false, isNew: false},  \n    {name: \"Min\", playCount: 3, isPicked: false, isNew: false },\n    {name: \"Leandro\", playCount: 1, isPicked: false, isNew: false},\n    {name: \"Rachel\", playCount: 4, isPicked: false, isNew: false},\n    {name: \"Bob\", playCount: 4, isPicked: false, isNew: false},\n    {name: \"Erika\", playCount: 3, isPicked: false, isNew: false},\n    {name: \"Charlie\", playCount: 4, isPicked: false, isNew: false},  \n    {name: \"Luke\", playCount: 2, isPicked: false, isNew: false},  \n    {name: \"Sarah\", playCount: 3, isPicked: false, isNew: false},  \n    {name: \"Amir\", playCount: 4, isPicked: false, isNew: false},  \n    {name: \"Dave\", playCount: 6, isPicked: false, isNew: false},  \n    {name: \"Liz\", playCount: 3, isPicked: false, isNew: false},  \n  ],\n  playersChosen: false,\n};\n\nexport default initial;","const adjectives = [\n  \"Flying\",\n  \"Tremendous\",\n  \"Furious\",\n  \"Surging\",\n  \"Majestic\",\n  \"Dazzling\",\n  \"Mighty\",\n  \"Dribbling\",\n  \"Tottering\",\n  \"Shambling\",\n  \"Staggering\",\n  \"Stumbling\",\n  \"Doddering\",\n  \"Shambolic\",\n  \"Drunken\",\n  \"Glorious\",\n  \"Magnificent\",\n  \"Torrential\",\n  \"Lightning\"\n];\n\nconst everydayWords = [\n  \"Foot\",\n  \"Toe\",\n  \"Big Toe\",\n  \"Heel\",\n  \"Hamstrung\",\n  \"Knee\",\n  \"Tootsie\",\n  \"Boot\",\n  \"Trainer\",\n  \"ArmChair\",\n  \"Deckchair\",\n  \"Couch\",\n  \"Sofa\",\n  \"Beer\",\n  \"Lager\",\n  \"Booze\"\n];\n\nconst nouns = [\n  \"Colonels\",\n  \"Crushers\",\n  \"Divas\",\n  \"Amigos\",\n  \"Stars\",\n  \"Typhoons\",\n  \"Ladies\",\n  \"Boys\",\n  \"Squirrels\",\n  \"Brigade\",\n  \"Foxes\",\n  \"Heroes\",\n  \"Wolves\",\n  \"Mob\",\n  \"Troop\",\n  \"Legion\",\n  \"Blokes\",\n  \"Lassies\",\n  \"Lads\"\n];\n\n// pickPlayer allows a player from the bank to be added to the picks list, ensuring they haven't been added already.\nconst pickPlayer = (state, { player }) => {\n  if (player.isPicked === false) {\n    player.isPicked = true;\n    state.players = [...state.players, player];\n  };  \n\n  return {\n    ...state   \n  }; \n};\n\n// drawPlayer ensures lowest plays players are picked first, but that those with the same number of players are picked at random to avoid bias over time.\nconst drawPlayer = (state) => {  \n  // If at least one player in the bank remains unpicked:\n  if (state.bank.some(player => player.isPicked === false)) {\n\n    // Filter players who have already been selected\n    let filteredBank = state.bank.filter( player => player.isPicked === false);\n    // Build a new randomised list from the filtered bank\n    let randomisedFilter = [];\n    for (let i = filteredBank.length; i > 0; i -= 1) {\n      let pick = filteredBank.splice(Math.floor(Math.random() * i), 1);\n      randomisedFilter.push(pick[0]);\n    };\n    // Sort highest to lowest playcounts (players with same playcounts will now not always appear at same/similar indices)\n    randomisedFilter.sort(( a, b ) => a.playCount - b.playCount); \n    // Select the first (so, a player from the set of players with the lowest score, produced randomly), and add to players list\n    randomisedFilter[0].isPicked = true;\n    state.players = [...state.players, randomisedFilter[0]];\n  };\n\n  return {\n    ...state,\n  }; \n};\n\n// addPlayer handles the addition of new players to the picks list, and includes unique name validation.\nconst addPlayer = (state, { player }) => {\n  // trim trailing whitespace from player name\n  player.name = player.name.trimLeft().trimRight();\n  \n  // prevent nameless players\n  if (player.name === \"\") {\n    alert(\"You cannot add a nameless player!\");\n    return state;\n  // prevent non-unique player names (case insensitive)\n  } else if (state.bank.some(bankPlayer => bankPlayer.name.toLowerCase() === player.name.toLowerCase())) {\n    alert(`A player called ${player.name} already exists in the bank. You can either add them directly from the bank with the pick button, or choose a different name`);\n    return state;\n    // invite user to differentiate a name that matches a picked name, in case e.g. 2 Jens are playing\n  } else if (state.players.some(playersMember => playersMember.name.toLowerCase() === player.name.toLowerCase())) {\n    alert(`A player called ${player.name} has already been picked. You can add an initial to tell them apart`);\n    return state;\n  } else {\n\n  player.isPicked = true;\n  player.isNew = true;\n\n  };\n\n  return {\n    ...state,\n    players: [...state.players, player],    \n  }; \n};\n\n// startGame fires when the \"Create Teams\" button is pressed and moves the view to Teams, hiding the New Players view.\nconst startGame = (state) => {\n  return {\n    ...state,\n    playersChosen: true,  \n  };\n}\n\n// clearPickedPlayers clears the picked players list.\nconst clearPickedPlayers = (state) => {\n  state.bank.forEach(player => resetIsPicked(player));\n\n  return {\n    ...state,\n    players: [],\n  }; \n};\n\n// randomiseTeams randomises the picked players list and pushes players to each team list.\nconst randomiseTeams = (state) => {\n  let players = [...state.players];\n  let shuffledPlayers = [];\n\n  // For genuine (pseudo!)randomness, players are first pulled at random from the players list, and then pushed to the front of a new list.\n  // This avoids biasing effects: should players be pushed at random into an empty list, those players pushed first will cluster together before the list grows.\n  // This matters because the draw feature always adds players in a predictable order (according to their play-counts). \n  for (let i = players.length; i > 0; i -= 1) {\n    let pick = players.splice(Math.floor(Math.random() * i), 1);\n    shuffledPlayers.push(pick[0]);\n  };\n\n  return {\n    ...state,\n    team1: shuffledPlayers.slice(0, (shuffledPlayers.length / 2)),    \n    team2: shuffledPlayers.slice(shuffledPlayers.length / 2),    \n  };\n};\n\n// generateName randomly generates a triple-barreled team name from three lists of words (see top). The formula is: (1) excessive adjective, (2) mundane/bodily/alcoholic noun, (3) noun collection.\nconst generateName = () => {\n  let adjective = adjectives[(Math.floor(Math.random() * adjectives.length))];  \n  let everyday = everydayWords[(Math.floor(Math.random() * everydayWords.length))]; \n  let noun = nouns[(Math.floor(Math.random() * nouns.length))]; \n  \n  let teamName = `${adjective} ${everyday} ${noun}`;\n\n  return {\n    teamName,\n  }\n}\n\n// Calls generateName() to assign team 1's name\nconst generateName1 = (state) => {\n  let name = generateName().teamName;\n  return {\n    ...state,\n    team1Name: name,\n  }; \n};\n\n// Calls generateName() to assign team 2's name\nconst generateName2 = (state) => {\n  let name = generateName().teamName;\n  return {\n    ...state,\n    team2Name: name,\n  }; \n};\n\n// Increments the playcount of the player passed to the function parameter \nconst incrementPlayCount = (player) => {\n  player.playCount = player.playCount + 1;\n  return player;\n}\n\n// Resets ths isPicked property of the player passed to the function parameter\nconst resetIsPicked = (player) => {\n  player.isPicked = false;\n  return player;\n}\n\n// Updates the \"isNew\" property of the player passed to the function parameter\nconst updateIsNew = (player) => {\n  player.isNew = false;\n  return player;\n}\n\n// save increments the scores of all players in the players list with incrementPlayCount(), works out if they are new (and so need to be added to the bank), and resets their other properties with updateIsNew() and resetIsPicked()\nconst save = (state) => {\n  // Increment the playCount of each player and reset isPicked to false\n  state.players.forEach(player => incrementPlayCount(resetIsPicked(player)));\n  // Push new players to the bank, reseting their isNew property to false\n  // state.players.forEach(player => player.isNew ? state.bank = [...state.bank, updateIsNew(player)] : null );\n  state.players.forEach(player => player.isNew ? state.bank = [updateIsNew(player), ...state.bank] : null );\n\n  return {\n    ...state,\n    // Reset all state, except player bank\n    players: [], \n    team1: [],\n    team2: [],\n    team1Name: \"Team 1\",\n    team2Name: \"Team 2\",\n    playersChosen: false,\n  }; \n};\n\n// Clears all records from the bank\nconst clearBank = (state) => {\n  window.confirm(\"Do you want to wipe the bank? This will delete all player information.\") ? state.bank = [] : state.bank = [...state.bank];\n  return {\n    ...state,  \n  }; \n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"CLEAR_BANK\": return clearBank(state);;\n    case \"PICK_PLAYER\": return pickPlayer(state, action);\n    case \"DRAW_PLAYER\": return drawPlayer(state);\n    case \"ADD_PLAYER\": return addPlayer(state, action);\n    case \"CREATE_TEAMS\": return startGame(randomiseTeams(state));\n    case \"CLEAR_CLICKED_PLAYERS\": return clearPickedPlayers(state);;\n    case \"RANDOMISE_TEAMS\": return randomiseTeams(state);\n    case \"GENERATE_NAME1\": return generateName1(state);\n    case \"GENERATE_NAME2\": return generateName2(state);\n    case \"SAVE\": return save(state);\n    default: return state;\n  }\n};\n\nexport default reducer;","import { createStore } from \"redux\";\nimport initial from \"./initial\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(\n  reducer,\n  initial,\n  window.__REDUX_DEVTOOLS_EXTENSION__\n  && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import reportWebVitals from './reportWebVitals';\nimport './styles/main.css';\nimport App from './App';\nimport store from \"./data/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n// reportWebVitals();\n"],"sourceRoot":""}